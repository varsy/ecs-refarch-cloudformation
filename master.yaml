Description: >

    This template deploys a VPC, with public and private subnets in one Availability Zone.
    It deploys an Internet Gateway, with a default route on the public subnets.
    It deploys a NAT Gateway, and default routes for it in the private subnets.

    It then deploys a ECS cluster using an AutoScaling Group in one Availability Zone.

    Finally, it deploys a TeamCity server ECS service from public image on Docker Hub.

    Last Modified: 01 August 2017
    Based on AWS Reference Architecture (https://github.com/awslabs/ecs-refarch-cloudformation) by Paul Maddox

Resources:

    VPC:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/tc-tf-test.jetbrains.com/infrastructure/vpc.yaml
            Parameters:
                EnvironmentName:    !Ref AWS::StackName
                VpcCIDR:            10.180.0.0/16
                PublicSubnet1CIDR:  10.180.8.0/21
                PublicSubnet2CIDR:  10.180.16.0/21
                PrivateSubnet1CIDR: 10.180.24.0/21
                PrivateSubnet2CIDR: 10.180.32.0/21

    SecurityGroups:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/tc-tf-test.jetbrains.com/infrastructure/security-groups.yaml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                VPC: !GetAtt VPC.Outputs.VPC

    ALB:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/tc-tf-test.jetbrains.com/infrastructure/load-balancers.yaml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                VPC: !GetAtt VPC.Outputs.VPC
                Subnets: !GetAtt VPC.Outputs.PublicSubnets
                SecurityGroup: !GetAtt SecurityGroups.Outputs.LoadBalancerSecurityGroup
#
#    ECS:
#        Type: AWS::CloudFormation::Stack
#        Properties:
#            TemplateURL: https://s3.amazonaws.com/tc-tf-test.jetbrains.com/infrastructure/ecs-cluster.yaml
#            Parameters:
#                EnvironmentName: !Ref AWS::StackName
#                InstanceType: t2.large
#                ClusterSize: 1
#                VPC: !GetAtt VPC.Outputs.VPC
#                SecurityGroup: !GetAtt SecurityGroups.Outputs.ECSHostSecurityGroup
#                Subnets: !GetAtt VPC.Outputs.PrivateSubnets
#
##    ProductService:
##        Type: AWS::CloudFormation::Stack
##        Properties:
##            TemplateURL: https://s3.amazonaws.com/tc-tf-test.jetbrains.com/services/product-service/service.yaml
##            Parameters:
##                VPC: !GetAtt VPC.Outputs.VPC
##                Cluster: !GetAtt ECS.Outputs.Cluster
##                DesiredCount: 2
##                Listener: !GetAtt ALB.Outputs.Listener
##                Path: /products
##
##    WebsiteService:
##        Type: AWS::CloudFormation::Stack
##        Properties:
##            TemplateURL: https://s3.amazonaws.com/tc-tf-test.jetbrains.com/services/website-service/service.yaml
##            Parameters:
##                VPC: !GetAtt VPC.Outputs.VPC
##                Cluster: !GetAtt ECS.Outputs.Cluster
##                DesiredCount: 2
##                ProductServiceUrl: !Join [ "/", [ !GetAtt ALB.Outputs.LoadBalancerUrl, "products" ]]
##                Listener: !GetAtt ALB.Outputs.Listener
##                Path: /
#
#
#Outputs:
#
#    ProductServiceUrl:
#        Description: The URL endpoint for the product service
#        Value: !Join [ "/", [ !GetAtt ALB.Outputs.LoadBalancerUrl, "products" ]]
#
#    WebsiteServiceUrl:
#        Description: The URL endpoint for the website service
#        Value: !Join ["", [ !GetAtt ALB.Outputs.LoadBalancerUrl, "/" ]]
